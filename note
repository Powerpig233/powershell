'get-childItem' or 'ls' // same as 'ls -l' in Unix
'Get-Alias' // all command name and equal to Unix
'echo' // same as Unix
'>>' // input to a file
'cat' // same as Unix
copy-Item file copyfile // same as 'copy' in Unix
        Copy-Item -Destination copyfile file
Remove-Item _.txt -WhatIf //
        Remove-Item _.txt -Confirm // remove all (.txt) file
create a new file and derictory
  mkdir new
  New-Item -ItemType Directory new1
  New-Item -ItemType File newf
'Write-Host content'
  'Write-Output'
'Sort'
        'Get-ChildItem | Sort-Object -Property Mode,lasttimeWrite'
        'Get-ChildItem | Sort-Object'

  
        'Get-ChildItem | Get-Member'
        'Get-ChildItem | Measure-Object' //count of the file
        'Get-ChildItem | Measure-Object -Property Length -Sum'
        '1+(Get-ChildItem | Measure-Object -Property Length -Sum -Maximum -Average).Maximum'
        'Get-ChildItem | Where-Object {$_.Extension -eq ".txt"}'
        'Get-ChildItem | Select-Object -First 5'
        'Get-ChildItem | Select-Object -Property Name,Length'
        
        
        cat .\fruit.txt | Select-String "l" // which includes 'l'
        cat .\fruit.txt | Select-String "^a" // start with 'a'
        cat .\fruit.txt | Select-String "m$" // end is 'm'



$[scope:]name or ${name}
$a=125+"2";echo $a            #127
$a="125"+"2";echo $a          #1252
$a=125+2;echo $a              #127
$a="125"+2;echo $a            #1252



[DateTime]::Now // actual date
$myarray ="apple","pear","peach"
$myarray = @("apple","pear","peach")
echo $myarray [1] // apple
echo $myarray [1..2] // apple pear
$myarray[2] = @(2,3,4);echo $myarray[2][1] // 3
$myarray2 = 2,3,4,5
$myarray2 += $myarray
echo $myarray2[3]

contains : containing (-notcontains) 
1,2,3,4 –contains 3      #True
-eq, -ne Results is  all of the elements which are equal, (not equal) with a given value 
1,2,3,4 –ne 3            #1,2,4 
-lt, -gt Result is  all of the elements which are smaller, (greater) to a given value 
1,2,3,4 –lt 3            # 1,2 
-le, -ge Smaller equal, greater equal 
-join, -split, -csplit (case split, small-capital letter) 

$aarray=@{?key”=?value”; …}
$at=@{a=4;b=5} # Among the elements ; !!!!!!
Reaching elements: ($at[a])(not good) or $at.a
Element assignment: ($at[a]=10)(not good) $at.a=10
Adding a new element: $at+=@{c=11}
To write out the associative array: $at
Name                           Value                                                                                                                  
----                           -----                                                                                                                  
c                              11                                                                                                                     
a                              4                                                                                                                      
b                              5                                                                                                                      


$a=new-object system.collections.arraylist
$a1= [system.collections.arraylist] (2,3,4)
$a1.add(10)
$a1.contains(3) # true
$a1.insert(2,20) # after 3 will be the place of 20!
$a1.sort()
If instruction: 
if (kif) {instructions} [elseif (instruction1)] else {instruction}


