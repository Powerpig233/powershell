#1)	Create a Powershell script which gets three words as parameters and writes out the longest of them to the screen!
# Check whether you get three parameters or not – if not, read from console:
if ($args.Length -ne 3)
{
    Write-Output "You need 3 parameters: "
    $a= @(0..2)
    for($i=0; $i -lt 3; $i++){
        $a[$i]=Read-Host
    }

    $longest=$a[0]

    for($i=1; $i -lt 3; $i++){
    if($a[$i].Length -gt $longest.Length){
        $longest=$a[$i]
        }
    }
    $longest
}
else {
    $longest=$args[0]
    for($i=1; $i -lt 3; $i++){
        if($args[$i].length -gt $longest.length){
            $longest=$args[$i]
            }
        }
    $longest
    }

# 2)	Create a Powershell script, which lists the current directory’s items sorted.
# The aspect of sorting should be in the item’s name (n), length (l) or the last write time (d). 
# The user can choose between those aspects by giving an argument. E.g: ./sorteditems.ps1 n
$a=Get-ChildItem
if([char]$args[0] -eq [char]'n'){
    $a | Sort name -Descending
}
elseif([char]$args[0] -eq [char]'l'){
    $a | Sort length
}
elseif([char]$args[0] -eq [char]'d'){
    $a | Sort LastWriteTime
}

# 3)	Create a PowerShell script, which reads a text file at the beginning. 
# In the text file, we have 2 words separated by coma. 
# Put the content of this file into an associative array as the first words are the keys, the second words are the values. 
# After the script should ask for a word from the user and writes out the value of that key in the array. (add an input file to your work, and change the name in the code)

$i=@{}
$file = Get-Content .\test1.txt

#$file=Read-Host -Prompt "Enter file"
#while (!(Test-Path $file)){
#    $file=Read-Host -Prompt "Error! $filename does not exist, try again"
#}
foreach ($line in $file)
{
    $part=$line.split(",")
    $i.($part[0])=$part[1]
}
$key = Read-Host  "Give a Key"
Write-Host $i.$key

# 4)	Create a Powershell script that needs 3 number parameters. 
# The script should give back all the numbers that can be divided by the first parameter, 
# in the interval starts which the second parameter, ends with the third. E.g: ./generateNumbers 2 1 10 -> 2 4 6 8 10
$num=$args[0]
$begin=$args[1]
$end=$args[2]

for($begin;$begin -le $end;$begin++){
    if($begin%$num -eq 0){
        Write-Host -NoNewline $begin" "
    }
}













